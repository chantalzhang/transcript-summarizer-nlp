I hope you all had a good week reading week and you're enjoying the unseasonably nice weather. We're gonna talk about Zky parsing or cyk parsing. we're going to talk about CKY parsing or CYK parsing. And then we're Going to motivate why we need that. And we're gonna talks about an algorithm to do that. Parsing is no longer as popular, but you still should know about it because it's very good pedagogically. There are three possible cases of CFG rules that do not conform to CNF form. And for us, we're going to create a table to store all of these possible constituents. And finally, we'll read the table to recover all of the possible parses of the sentence. In our grammar it's going to be Np. you can build a rule with the constituents that you've already found there. And then you can use all of them to build bigger chunks, bigger constituents. And we just need to check all possible breakpoints to make sure that we cover all of the possible ways to build that bigger chunk. One to 5, 5 to 6 is all worthy. And one to five, five to six is all OK. And then here, 0 to 6. it's also not possible because of all of the empty cells there. Any anything that ends with my . you should just do every possible pair. And this is how you can recover all the parses. We are no longer computing all possible parses because of because of this. There are other parsing algorithms. if you're interested, you can look them up. The the one that I would look at is to do top down parsing with the early algorithm.