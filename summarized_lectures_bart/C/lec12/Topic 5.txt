There's one topic from last class we didn't quite manage to cover, which would be interesting to talk about. Here's just a about CF, GS and constituent trees. There's gonna be an S node which is the starting symbol. And with certain kinds of grammars, 1 tends to be more efficient than the other and forth. convert this grammar fragment into Cnf. And I didn't formally define what counts as a , a question. I never formally defined what it means to be an acceptable change to the grammar. Once you see the example, this will make sense. In the other notation, just keep a list. and then you just add another entry to the list. You can decide to pick the tree with the most probable parse. But we need to change things a little bit because CF GS did not have a concept of probability built in. We're going to make CF GS become PCF Cfgs become Pcfgs. way to do this if you only care about the most probable tree, which is that we modify the CYK algorithm directly to incorporate probabilities as we go along. And that'll be more efficient because then you don't have to explicitly create all of the ambiguous trees and evaluate the probabilities for all. This is just another way of rewriting that. I don't know what's you prefer in terms of being more human interpretable, but it's just the same thing.